module Enumerable

#Create #my_each, a method that is identical to #each but (obviously) does not use #each. You'll need to remember the yield statement. Make sure it returns the same thing as #each as well.

def my_each
    0.upto(self.size - 1) do |i|
      yield(self.to_a[i]) if block_given?
    end
    self
   end
	  
#Create #my_each_with_index in the same way.

def my_each_with_index
    0.upto(self.size - 1) do |i|
      yield(self.to_a[i], i) if block_given?
    end
    self
  end

#Create #my_select in the same way, though you may use #my_each in your definition (but not #each).

def my_select
    return self unless block_given?
    selected = []
    for i in self
        selected << i if yield(i)
    end
    selected
  end

#Create #my_all? (continue as above)

 def my_all?
    if block_given?
      for i in self
        return false unless yield(i)
      end
    end
    true
  end

#Create #my_any?

 def my_any?
    if block_given?
      for i in self
        return true if yield(i)
      end
      return false
    end
    return true if self != nil
    false
  end

#Create #my_none?

def my_none?
    for i in self
      if block_given?
        return false if yield(i)
      else
        return false if i != nil && i != false
      end
    end
    true
  end

#Create #my_count

def my_count(arg=nil)
    counter = 0
    for i in self
      if block_given?
        counter += 1 if yield(i)
      elsif arg != nil
        counter += 1 if i == arg
      else
        counter += 1
      end
    end
    counter
  end

#Create #my_map

def my_map(&block)
    map = []
    if block_given?
      for i in self
        map << block.call(i)
      end
      map
    else
      self
    end
  end

#Create #my_inject

def my_inject(n=nil)
    memo = n == nil ? self.first : n
    m = n == nil ? self.my_count - 1 : self.my_count
    for i in self.last(m)
      memo = yield(memo, i)
    end
    memo
  end

end
#Test your #my_inject by creating a method called #multiply_els which multiplies all the elements of the array together by using #my_inject, e.g. multiply_els([2,4,5]) #=> 40

def multiply_els(array)
  array.my_inject{ |memo, n| memo * n }
end	

#Modify your #my_map method to take a proc instead.

=begin
Modify your #my_map method to take either a proc or a block. It won't be necessary to apply both a proc and a block in the same #my_map call 
since you could get the same effect by chaining together one #my_map call with the block and one with the proc. This approach is also clearer, 
since the user doesn't have to remember whether the proc or block will be run first. So if both a proc and a block are given, only execute the proc.
=end

end
